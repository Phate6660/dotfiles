#  ██▒   █▓ ▄▄▄       ██▓     ██▓    ▓█████▓██   ██▓
# ▓██░   █▒▒████▄    ▓██▒    ▓██▒    ▓█   ▀ ▒██  ██▒
#  ▓██  █▒░▒██  ▀█▄  ▒██░    ▒██░    ▒███    ▒██ ██░
#   ▒██ █░░░██▄▄▄▄██ ▒██░    ▒██░    ▒▓█  ▄  ░ ▐██▓░
#    ▒▀█░   ▓█   ▓██▒░██████▒░██████▒░▒████▒ ░ ██▒▓░
#    ░ ▐░   ▒▒   ▓▒█░░ ▒░▓  ░░ ▒░▓  ░░░ ▒░ ░  ██▒▒▒
#    ░ ░░    ▒   ▒▒ ░░ ░ ▒  ░░ ░ ▒  ░ ░ ░  ░▓██ ░▒░
#      ░░    ░   ▒     ░ ░     ░ ░      ░   ▒ ▒ ░░
#       ░        ░  ░    ░  ░    ░  ░   ░  ░░ ░
#      ░                                    ░ ░
# This file was made and edited with:
# - Emacs
# - Nano
# - NVim
# Created by: https://github.com/Phate6660

if [[ $- != *i* ]] ; then
        return
fi

## Functions
# Search for a running process. Example: `psg firefox`
# shellcheck disable=SC2009
psg() {
    ps auxfww | grep -v grep | grep -i -e VSZ -e "$1"
}

# Obtain the weather in your terminal. Change [REDACTED] to either your town, zip code, coordinates, or IP Address
wttr() {
    local request="wttr.in/${1-[REDACTED]?u}"
    [ "$COLUMNS" -lt 125 ] && request+='?n'
    curl -H "Accept-Language: ${LANG%_*}" --compressed "$request"
}

# Neatly output contents of $PATH
lspath() { echo -e "${PATH//:/\\n}"; }

# Reconnect to protonvpn
pvre() {
    sudo protonvpn d
    sudo protonvpn c -f
    sudo protonvpn s
    # shellcheck disable=SC2162
    read -p 'Press [ENTER] to continue.'
}

# Connect to a P2P server in protonvpn
pvp2p() {
    sudo protonvpn d
    sudo protonvpn c --p2p
    sudo protonvpn s
}

# Compare 2 directories for differences. There will be no output if both directories are identical. Includes subdirectories too.
# Example: atts $HOME/example $HOME/example2
atts() { diff -r -q "$@"; }

# This script was automatically generated by the broot program
# More information can be found in https://github.com/Canop/broot
# This function starts broot and executes the command
# it produces, if any.
# It's needed because some shell commands, like `cd`,
# have no useful effect if executed in a subshell.
br() {
    f=$(mktemp)
    (
        set +e
        broot --outcmd "$f" "$@"
        code=$?
        if [ "$code" != 0 ]; then
            rm -f "$f"
            exit "$code"
        fi
    )
    code=$?
    if [ "$code" != 0 ]; then
        return "$code"
    fi
    d=$(<"$f")
    rm -f "$f"
    eval "$d"
}

# How much music. Example output:
# You have:
# ---------
# 172 artists.
# 1113 albums.
# 11306 songs.
# 17107 files.
# 
# Which uses up 232GB of storage.
# Also, you have played 45955 complete songs since the end of March 2019.
# 
# Now playing: Seamless by American Head Charge
# ====================================================
# Note: You may need to change some things, like the music directory and the libre.fm user url.
hmm() {
    artists="$(mpc list Artist | sed '/^\s*$/d' | wc -l) artists."
    albums="$(mpc list Album | sed '/^\s*$/d' | wc -l) albums."
    songs="$(mpc list Title | sed '/^\s*$/d' | wc -l) songs."
	files="$(tree -a "$MUSIC" | tail -n1 | awk -F\  '{print $3}') files."
    size="Which uses up $(\du -hs /mnt/ehdd2/Music | cut -c 1-4)B of storage."
    amount="Also, you have played \
        $(w3m -dump https://libre.fm/user/phate6660/stats | grep Total | sed "s/[^0-9]//g") \
        complete songs since the end of March 2019."
    status="$(w3m -dump https://libre.fm/user/phate6660/ | grep "playing" | sed 's/×\ //g')"
    echo -e "\n\
        You have:\n\
        ---------\n\
        ${artists}\n\
        ${albums}\n\
        ${songs}\n\
        ${files}\n\n\
        ${size}\n\
        ${amount}\n\n\
        $status\n"
}

# Update Gentoo
update() {
    sudo emerge --sync                        # Sync repositories and pipe into less for easy reading of the output
    sudo emerge -avuDN --with-bdeps y @world  # Update packages
    sudo emerge -Dac                          # Remove un-needed packages
    sudo revdep-rebuild -i                    # Rebuild any required dependencies
	sudo prelink -amR                         # Prelink libs for faster startup times
    # shellcheck disable=SC2162
    read -p "Your system has been updated. Press [ENTER] to continue."
}

# A wrapper function for mpv
play() {
    local command="mpv --fullscreen"
    case "$1" in
        cd) eval "$command ${*:2} cdda://";;
        dvd) eval "$command --deinterlace=yes ${*:2} dvd://";;
        list) eval "$command --playlist=$2 ${*:3}";;
        *) eval "$command ${*:2}";;
    esac
}

colors() {
    for x in {0..8}; do 
        for i in {30..37}; do 
            for a in {40..47}; do 
                echo -ne "\e[${x};${i};${a}""m\\\e[${x};${i};${a}""m\e[0;37;40m "
            done
            echo
        done
    done
    echo ""
}

# usage: nwd COMMAND
# Runs COMMAND and sends a notification when finished.
nwd() {
    local COMMAND="$*"
    eval "$COMMAND"
    notify-send "$ $COMMAND" "Your command is finished."
}

uu() {
    coreutils "$*"
}

rp() {
    pulseaudio --start
    pacmd load-module module-native-protocol-tcp auth-ip-acl=127.0.0.1
}

conda_init() {
    # !! Contents within this block are managed by 'conda init' !!
    __conda_setup="$('/home/valley/.anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
    if [ $? -eq 0 ]; then
        eval "$__conda_setup"
    else
        if [ -f "/home/valley/.anaconda3/etc/profile.d/conda.sh" ]; then
            . "/home/valley/.anaconda3/etc/profile.d/conda.sh"
        else
            export PATH="/home/valley/.anaconda3/bin:$PATH"
        fi
    fi
    unset __conda_setup
}

ocaml_dev() {
    eval "$(opam config env)"
}

RPG_CLI="/home/valley/downloads/git/rpg-cli/target/release/rpg-cli"
rpg () {
   $RPG_CLI "$@"
   # shellcheck disable=SC2164
   cd "$($RPG_CLI --pwd)"
}

## General Stuff
# check and change (if needed) window size after every command finishes
shopt -s checkwinsize

# When the shell exits, append to the history file instead of overwriting it
shopt -s histappend

# Enable extglob, used for (as the name suggests), extending features and support for globbing
shopt -s extglob

# Prompt example (you can't tell in here, but there is color):
# [11:21 PM]-[Tue Dec 10]
# [valley@gentoo]
# [~]-[0]->
export PS1="\[$(tput bold)\][\[$(tput sgr0)\]\[$(tput sgr0)\]\[\033[38;5;99m\]\@\[$(tput bold)\]\[$(tput sgr0)\]\[\033[38;5;15m\]]-[\[$(tput sgr0)\]\[$(tput sgr0)\]\[\033[38;5;51m\]\d\[$(tput bold)\]\[$(tput sgr0)\]\[\033[38;5;15m\]]\[$(tput sgr0)\]\n\[$(tput bold)\][\[$(tput sgr0)\]\[$(tput sgr0)\]\[\033[38;5;118m\]\u\[$(tput bold)\]\[$(tput sgr0)\]\[\033[38;5;15m\]@\[$(tput sgr0)\]\[$(tput sgr0)\]\[\033[38;5;69m\]\h\[$(tput bold)\]\[$(tput sgr0)\]\[\033[38;5;15m\]]\[$(tput sgr0)\]\n\[$(tput bold)\][\[$(tput sgr0)\]\[$(tput sgr0)\]\[\033[38;5;244m\]\W\[$(tput sgr0)\]\[\033[38;5;15m\]]\[$(tput bold)\]\[$(tput sgr0)\]\[\033[38;5;255m\]-\[$(tput sgr0)\]\[\033[38;5;15m\][\[$(tput sgr0)\]\[$(tput sgr0)\]\[\033[38;5;51m\]\$?\[$(tput bold)\]\[$(tput sgr0)\]\[\033[38;5;15m\]]\[$(tput sgr0)\]\[\033[38;5;255m\]-\[$(tput sgr0)\]\[\033[38;5;226m\]> \[$(tput sgr0)\]"

# Set the PATH
export PATH="$HOME/.cargo/bin:$PATH:$HOME/scripts:$HOME/projects/node_modules/web-ext/bin:$HOME/dotnet:/home/valley/.dotnet/tools:$HOME/.config/composer/vendor/bin:$HOME/downloads/armv7-eabihf--glibc--bleeding-edge-2020.08-1/bin:$HOME/.local/bin:$HOME/downloads/git/Nim/bin:$HOME/.local/share/ponyup/bin"

# Variables for paths in EHDDs
export ANIME="/mnt/ehdd/Videos/Anime"
export ANIME2="/mnt/ehdd2/Videos/Anime"
export EHDD="/mnt/ehdd"
export EHDD2="/mnt/ehdd2"
export MOVIES="/mnt/ehdd/Videos/Movies"
export MUSIC="/mnt/ehdd2/Music"
export TV="/mnt/ehdd/Videos/TV"

# Enable filtering in mpv bash completion
_mpv_use_media_globexpr=1

# Enable completions
source /etc/bash/bashrc.d/bash_completion.sh
source /home/valley/downloads/git/mpv-bash-completion/mpv.sh # Source mpv completions

# Generate LS_COLORS with vivid
export LS_COLORS="$(vivid generate molokai)"

# Color for less
export LESS=-R
export LESS_TERMCAP_mb=$'\E[1;31m'     # begin blink
export LESS_TERMCAP_md=$'\E[1;36m'     # begin bold
export LESS_TERMCAP_me=$'\E[0m'        # reset bold/blink
export LESS_TERMCAP_so=$'\E[01;44;33m' # begin reverse video
export LESS_TERMCAP_se=$'\E[0m'        # reset reverse video
export LESS_TERMCAP_us=$'\E[1;32m'     # begin underline
export LESS_TERMCAP_ue=$'\E[0m'        # reset underline

# Set the compiler to GCC/G++ by default
export CC="gcc"
export CXX="g++"

# CMake + other various compilation options
COMMON_FLAGS="-march=ivybridge -O3 -pipe -falign-functions=32"
export CMAKE_GENERATOR="Ninja"
export CFLAGS="${COMMON_FLAGS}"
export CXXFLAGS="${COMMON_FLAGS}"

# Make GPG work
export GPG_TTY="$(tty)"

# Set various EDITOR related stuff
export EDITOR="/usr/bin/nvim"
export SUDO_EDITOR="nvim"

# Set XZ to use max compression (-9) and multithread using the number of CPUs (-T0)
export XZ_DEFAULTS="-9 -T0"

# dotnet
export DOTNET_ROOT="$HOME/dotnet"
export DOTNET_CLI_TELEMETRY_OPTOUT="true"

## Aliases
# cat -> bat with plain output
alias cat="bat -p"
# ls -> exa with extended metadata, type indicators, headers, showing all files, and git status
alias ls="exa -lFha --git"
# ps -> ps with {
# show all processes,
# display user-oriented format,
# show processes that aren't attached to ttys,
# use full-format listing,
# no output truncation
# }
alias ps="ps auxfww"
# mv -> mv with make any necessary parent directories, show verbose output
alias mkdir='mkdir -pv'
# {mv, rm} -> {mv, rm} with interactive and verbose
alias mv="mv -iv" 
alias rm="rm -iv"
# cp -> xcp with verbose and 4 workers (threads)
alias cp="xcp -vw 4"
# Display what processes are using ALSA
alias adev="fuser -fv /dev/snd/*"
# View audio stats like bitrate and samplerate of audio currently playing in ALSA
alias astat="cat /proc/asound/card0/pcm0p/sub0/hw_params"
# View volume for ALSA
alias avol="awk -F\"[][]\" '/dB/ { print \$2 }' <(amixer sget Master)"
# Set the keyboard rate | TODO: remember what those numbers mean so I can explain it
alias setr="xset r rate 200 60"
# ss -> ss with no service names, only tcp sockets, displaying listening sockets, and showing processes using sockets
alias ss="ss -ntlp"
# Use aria2 with 16 threads and rate each thread to 1M
alias aria="aria2c -c -j5 -x5 -s5 -k 5M"
# Alias to cure my laziness
alias e="emacsclient"
# rsfetch with options wanted
alias rsfetch="rsfetch -cDdEeghkmMstuUC 0 -p portage"
# View anime collection as a tree, excludes various files through globbing, and extends down 3 levels
alias lsanime="exa -I \
              '*Menu*|*Screen*|*SP*|*CD*|*Sample*|*Extra*|*.jpg|*.png|*.ass|*.srt|*.mp4|*.mkv|*.txt|*.nfo|*.sfv|*.md5|*.mka|*.rar|playlist' \
              -L 3 -T $ANIME"
alias wall="nitrogen --set-zoom-fill --random /mnt/ehdd/Pictures/wallpapers/"
alias neofetch="MUSIC_C=mpd neofetch"

[[ -s "$HOME/.xmake/profile" ]] && source "$HOME/.xmake/profile" # load xmake profile

alias luamake=/home/valley/downloads/git/lua-language-server/3rd/luamake/luamake
